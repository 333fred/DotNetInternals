@page "/"
@implements IDisposable
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager

<PageTitle>Lab • DotNetInternals</PageTitle>

<div class="row align-items-center justify-content-center my-1 w-100">
    @* App name / link *@
    <div class="col-auto">
        <a href="/" class="text-decoration-none">lab.razor.fyi</a>
        (<a href="https://github.com/jjonescz/DotNetInternals">GitHub</a>)
    </div>

    @* Input tabs *@
    <div class="col-auto">
        @if (SimpleMode)
        {
            <div class="btn-toolbar" role="toolbar" title="Input">
                @* C# / Razor switch *@
                <InputRadioGroup @bind-Value:get="SelectedSimpleInput" @bind-Value:set="OnSelectSimpleInputAsync">
                    <div class="btn-group me-2" role="group" title="Input type">
                        <InputRadio class="btn-check" id="inputCSharp" Value="@SpecialTab.AddCSharp" />
                        <label class="btn btn-outline-primary" for="inputCSharp">
                            C#
                        </label>

                        <InputRadio class="btn-check" id="inputRazor" Value="@SpecialTab.AddRazor" />
                        <label class="btn btn-outline-primary" for="inputRazor">
                            Razor
                        </label>
                    </div>
                </InputRadioGroup>

                <div class="btn-group">
                    <button type="button" class="btn btn-outline-secondary"
                            title="Add more input files"
                            @onclick="() => forceAdvancedMode = true">
                        @BootstrapIcons.PlusLg
                    </button>
                </div>
            </div>
        }
        else
        {
            <div class="input-group">
                @if (CurrentInput != null && renamingTo != null)
                {
                    @* Renaming confirmation *@
                    <input type="text" class="form-control" placeholder="@CurrentInput.FileName" title="File name" @bind="renamingTo" />
                    <button type="button" class="btn btn-outline-primary" title="Confirm rename"
                            @onclick="RenameInputAsync">
                        @BootstrapIcons.CheckLg
                    </button>
                    <button type="button" class="btn btn-outline-secondary" title="Cancel rename"
                            @onclick="() => renamingTo = null">
                        @BootstrapIcons.XLg
                    </button>
                }
                else if (CurrentInput != null && deletingInput)
                {
                    @* Deleting confirmation *@
                    <span class="input-group-text">Delete this file?</span>
                    <button type="button" class="btn btn-outline-danger" title="Confirm delete"
                            @onclick="DeleteInputAsync">
                        @BootstrapIcons.CheckLg
                    </button>
                    <button type="button" class="btn btn-outline-secondary" title="Cancel delete"
                            @onclick="() => deletingInput = false">
                        @BootstrapIcons.XLg
                    </button>
                }
                else
                {
                    @* Input tabs *@
                    <select class="form-select" title="Input file" @bind:get="currentInputIndex" @bind:set="OnInputSelectedAsync">
                        @foreach (var (index, input) in inputs.Index())
                        {
                            <option value="@index">
                                @input.FileName
                            </option>
                        }
                        <hr />
                        <option value="@((int)SpecialTab.AddRazor)">
                            Add .razor
                        </option>
                        <option value="@((int)SpecialTab.AddCSharp)">
                            Add .cs
                        </option>
                    </select>

                    @if (CurrentInput != null)
                    {
                        @* Rename button *@
                        <button type="button" class="btn btn-outline-secondary" title="Rename current file"
                                @onclick="() => renamingTo = CurrentInput.FileName">
                            @BootstrapIcons.Pencil
                        </button>

                        @* Delete button *@
                        if (inputs.Count > 1)
                        {
                            <button type="button" class="btn btn-outline-danger" title="Delete current file"
                                    @onclick="() => deletingInput = true">
                                @BootstrapIcons.Trash3
                            </button>
                        }
                    }
                }
            </div>
        }
    </div>

    @* Compile button *@
    <div class="col-auto">
        <button type="button" class="btn btn-primary" @onclick="CompileAsync">
            Compile
            @if (compilationInProgress)
            {
                <div class="spinner-border spinner-border-sm ms-2" role="status">
                    <span class="visually-hidden">Compiling...</span>
                </div>
            }
        </button>
    </div>

    @* Output switch *@
    <InputRadioGroup @bind-Value="selectedOutputType">
        <div class="btn-group col-auto" role="group" title="Output type">
            @foreach (var output in CurrentCompiledFile?.Outputs ?? [])
            {
                var id = $"output{output.Type}";
                <InputRadio class="btn-check" id="@id" Value="@output.Type" />
                <label class="btn btn-outline-primary" for="@id">
                    @output.Type
                </label>
            }

            <InputRadio class="btn-check" id="outputDiagnostics" Value="diagnosticsOutputType" />
            <label class="btn btn-outline-primary" for="outputDiagnostics">
                Diagnostics
                @if (compiled?.NumErrors > 0)
                {
                    <span class="badge bg-danger">@compiled.NumErrors</span>
                }
                else if (compiled?.NumWarnings > 0)
                {
                    <span class="badge bg-warning">@compiled.NumWarnings</span>
                }
            </label>
        </div>
    </InputRadioGroup>

    @* Settings button *@
    <div class="col-auto">
        <Settings @ref="settings" Editor="inputEditor" @bind-WordWrap="wordWrap" @bind-UseVim="useVim" />
    </div>
</div>

@* Input / output text areas *@
@{
    var textAreaClass = $"form-control h-100 flex-grow-1 {(wordWrap ? "" : "no-wrap")}";
}
<div class="row g-0 flex-grow-1">
    <div class="col d-flex flex-column">
        <div id="vim-status" class="vim-status-bar" hidden="@(!useVim)" />
        <div class="flex-grow-1">
            <BlazorMonaco.Editor.StandaloneCodeEditor @ref="inputEditor" Id="input-editor"
                ConstructionOptions="EditorConstructionOptions" OnDidInit="EditorInitAsync" />
        </div>
    </div>
    <div class="col">
        <textarea value="@Output" class="@textAreaClass" readonly placeholder="Empty output (click Compile to refresh)" spellcheck="false"></textarea>
    </div>
</div>

@code {
    private const string diagnosticsOutputType = "Diagnostics";

    private readonly List<Input> inputs = new();
    private int currentInputIndex;
    private string? renamingTo;
    private bool deletingInput;
    private bool forceAdvancedMode;
    private StandaloneCodeEditor inputEditor = null!;
    private string? selectedOutputType;
    private bool compilationInProgress;
    private CompiledAssembly? compiled;
    private Settings settings = null!;
    private bool wordWrap;
    private bool useVim;

    private sealed record Input(string FileName, TextModel Model)
    {
        public string FileName { get; set; } = FileName;
    }

    private enum SpecialTab
    {
        AddRazor = -1,
        AddCSharp = -2,
    }

    private Input? CurrentInput
    {
        get
        {
            if (currentInputIndex < 0 || currentInputIndex >= inputs.Count)
            {
                return null;
            }

            return inputs[currentInputIndex];
        }
    }

    /// <summary>
    /// In simple mode, there is just one tab with either Razor or C# code.
    /// </summary>
    private bool SimpleMode
    {
        get
        {
            if (forceAdvancedMode || inputs is not [var input])
            {
                return false;
            }

            var fileName = input.FileName;
            return fileName == Compiler.InitialRazorCode.SuggestedFileName ||
                fileName == Compiler.InitialCSharpCode.SuggestedFileName;
        }
    }

    private SpecialTab SelectedSimpleInput
    {
        get
        {
            return CurrentInput?.FileName == Compiler.InitialRazorCode.SuggestedFileName
                ? SpecialTab.AddRazor
                : SpecialTab.AddCSharp;
        }
    }

    protected override void OnInitialized()
    {
        NavigationManager.LocationChanged += OnLocationChanged;
    }

    void IDisposable.Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }

    private async void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        await LoadInputStateFromUrl();
        StateHasChanged();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        // Select an output type if none is selected.
        if (selectedOutputType != diagnosticsOutputType &&
            CurrentCompiledFile?.Outputs.Length > 0 &&
            (selectedOutputType == null || CurrentCompiledFile.GetOutput(selectedOutputType) == null))
        {
            selectedOutputType = CurrentCompiledFile.Outputs.MaxBy(static o => o.Priority)!.Type;
            StateHasChanged();
        }
    }

    private StandaloneEditorConstructionOptions EditorConstructionOptions(StandaloneCodeEditor editor)
    {
        return new StandaloneEditorConstructionOptions
        {
            AutomaticLayout = true,
            WordWrap = wordWrap ? "on" : "off",
        };
    }

    private async Task OnInputSelectedAsync(int selectedInputIndex)
    {
        switch (selectedInputIndex)
        {
            case (int)SpecialTab.AddRazor:
                await AddInputAsync(Compiler.InitialRazorCode);
                break;

            case (int)SpecialTab.AddCSharp:
                await AddInputAsync(Compiler.InitialCSharpCode);
                break;

            case var _ when selectedInputIndex >= 0 && selectedInputIndex < inputs.Count:
                currentInputIndex = selectedInputIndex;
                await inputEditor.SetModel(inputs[selectedInputIndex].Model);
                break;
        }
    }

    private async Task OnSelectSimpleInputAsync(SpecialTab tab)
    {
        Debug.Assert(SimpleMode && inputs.Count == 1);
        inputs.Clear();
        await AddInputAsync(tab == SpecialTab.AddRazor
            ? Compiler.InitialRazorCode
            : Compiler.InitialCSharpCode);
        Debug.Assert(SimpleMode);
    }

    private async Task RenameInputAsync()
    {
        Debug.Assert(CurrentInput != null && renamingTo != null);
        if (CurrentInput.FileName != renamingTo)
        {
            var oldLanguage = GetLanguageForFileExtension(Path.GetExtension(CurrentInput.FileName));
            var newLanguage = GetLanguageForFileExtension(Path.GetExtension(renamingTo));

            CurrentInput.FileName = renamingTo;

            if (oldLanguage != newLanguage)
            {
                await BlazorMonaco.Editor.Global.SetModelLanguage(JSRuntime, CurrentInput.Model, newLanguage);
            }
        }
        renamingTo = null;
    }

    private async Task DeleteInputAsync()
    {
        Debug.Assert(CurrentInput != null && inputs.Count > 1);
        inputs.RemoveAt(currentInputIndex);
        currentInputIndex = 0;
        deletingInput = false;
        await inputEditor.SetModel(CurrentInput.Model);
    }

    private async Task AddInputAsync(InitialCode initialCode)
    {
        var fileName = FindUniqueName(initialCode);
        var inputCode = initialCode.ToInputCode(fileName);
        var model = await CreateModelAsync(inputCode);
        inputs.Add(new(fileName, model));
        currentInputIndex = inputs.Count - 1;
        await inputEditor.SetModel(model);
    }

    private string FindUniqueName(InitialCode initialCode)
    {
        for (var i = 0; ; i++)
        {
            var suffix = i == 0 ? "" : $"{i}";
            var fileName = initialCode.GetFinalFileName(suffix);
            if (!inputs.Any(i => i.FileName == fileName))
            {
                return fileName;
            }
        }
    }

    private async Task CompileAsync()
    {
        compilationInProgress = true;

        // Get input texts.
        var inputBuilder = ImmutableArray.CreateBuilder<InputCode>(inputs.Count);
        foreach (var (fileName, model) in inputs)
        {
            var text = await model.GetValue(EndOfLinePreference.TextDefined, preserveBOM: true);
            inputBuilder.Add(new() { FileName = fileName, Text = text });
        }
        var inputCodes = inputBuilder.ToImmutable();

        // Save state (input codes) to URL.
        var slug = Compressor.Compress(new SavedState { Inputs = inputCodes });
        NavigationManager.NavigateTo(NavigationManager.BaseUri + "#" + slug, forceLoad: false);

        await RefreshAsync();

        // Compile.
        compiled = await Compiler.CompileAsync(inputCodes);

        compilationInProgress = false;
    }

    private string Output => selectedOutputType switch
    {
        _ when compiled is null => "",
        null => "",
        diagnosticsOutputType => compiled.Diagnostics,
        var other => CurrentCompiledFile?.GetOutput(other) ?? "",
    };

    private CompiledFile? CurrentCompiledFile
    {
        get
        {
            return compiled?.Files.TryGetValue(CurrentInput?.FileName ?? "", out var file) == true
                ? file
                : null;
        }
    }

    private async Task EditorInitAsync()
    {
        await settings.InitializeAsync();

        await LoadInputStateFromUrl();
    }

    private async Task LoadInputStateFromUrl()
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        var slug = uri.Fragment.TrimStart('#');

        inputs.Clear();
        currentInputIndex = 0;

        if (string.IsNullOrWhiteSpace(slug))
        {
            await AddInputAsync(Compiler.InitialRazorCode);
        }
        else
        {
            var savedState = Compressor.Uncompress(slug);
            foreach (var (index, input) in savedState.Inputs.Index())
            {
                var model = await CreateModelAsync(input);
                inputs.Add(new(input.FileName, model));

                if (index == 0)
                {
                    await inputEditor.SetModel(model);
                }
            }
        }
    }

    private async Task<TextModel> CreateModelAsync(InputCode inputCode)
    {
        return await BlazorMonaco.Editor.Global.CreateModel(
            JSRuntime,
            value: inputCode.Text,
            language: GetLanguageForFileExtension(inputCode.FileExtension));
    }

    private static string? GetLanguageForFileExtension(string extension) => extension switch
    {
        ".razor" or ".cshtml" => "razor",
        ".cs" => "csharp",
        _ => null,
    };
}
