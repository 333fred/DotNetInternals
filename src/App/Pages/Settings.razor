@inject IJSRuntime JSRuntime
@inject ILocalStorageService LocalStorage

<button type="button" class="btn btn-outline-secondary" @onclick="() => modalOpen = true">
    Settings
</button>

@if (modalOpen)
{
    <div class="modal d-block bg-opacity-75 bg-secondary" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Settings</h5>
                    <button type="button" class="btn-close" aria-label="Close" @onclick="() => modalOpen = false"></button>
                </div>
                <div class="modal-body">
                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" id="wordWrap" @bind="WordWrap"
                            @bind:after="OnWordWrapChanged" />
                        <label class="form-check-label" for="wordWrap">
                            Word wrap
                        </label>
                    </div>
                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" id="vim" @bind="UseVim"
                            @bind:after="OnVimChanged" />
                        <label class="form-check-label" for="vim">
                            Use VIM
                        </label>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" @onclick="() => modalOpen = false">Close</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private bool modalOpen;
    private IJSObjectReference? vimDisposable;

    [Parameter] public bool WordWrap { get; set; }
    [Parameter] public EventCallback<bool> WordWrapChanged { get; set; }
    [Parameter] public bool UseVim { get; set; }
    [Parameter] public EventCallback<bool> UseVimChanged { get; set; }
    [Parameter, EditorRequired] public required StandaloneCodeEditor Editor { get; set; }

    public async Task InitializeAsync()
    {
        // Load settings from local storage.
        if (await LocalStorage.ContainKeyAsync(nameof(WordWrap)))
        {
            WordWrap = await LocalStorage.GetItemAsync<bool>(nameof(WordWrap));
            await OnWordWrapChanged();
        }
        if (await LocalStorage.ContainKeyAsync(nameof(UseVim)))
        {
            UseVim = await LocalStorage.GetItemAsync<bool>(nameof(UseVim));
            await OnVimChanged();
        }
    }

    private async Task OnWordWrapChanged()
    {
        await RefreshAsync();
        await WordWrapChanged.InvokeAsync(WordWrap);
        await LocalStorage.SetItemAsync(nameof(WordWrap), WordWrap);
        await Editor.UpdateOptions(new EditorUpdateOptions { WordWrap = WordWrap ? "on" : "off" });
    }

    private async Task OnVimChanged()
    {
        await RefreshAsync();
        await UseVimChanged.InvokeAsync(UseVim);
        await LocalStorage.SetItemAsync(nameof(UseVim), UseVim);
        if (UseVim)
        {
            if (vimDisposable is null)
            {
                vimDisposable = await JSRuntime.InvokeAsync<IJSObjectReference>("jslib.EnableVimMode", "input-editor", "vim-status");
            }
        }
        else
        {
            if (vimDisposable is not null)
            {
                await vimDisposable.InvokeVoidAsync("dispose");
                vimDisposable = null;
            }
        }

        await Editor.Layout();
    }
}
