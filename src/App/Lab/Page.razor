@page "/"
@implements IAsyncDisposable
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject WorkerController Worker
@inject LanguageServices LanguageServices
@inject ILogger<Page> Logger

<PageTitle>Lab â€¢ DotNetInternals</PageTitle>

<FluentHeader Style="background-color: var(--custom-light)" Height="null">
    <FluentStack VerticalAlignment="VerticalAlignment.Center" Wrap="true">
        @* Logo *@
        <a href="/" style="line-height: 0"><img src="favicon.png" alt="Logo" title="DotNetInternals" width="24" height="24" /></a>

        @* Input presets (quick-start templates) *@
        <FluentSelect AriaLabel="Presets" Items="AvailablePresets"
        @bind-SelectedOption="SelectedPreset" @bind-SelectedOption:after="OnInputPresetChangedAsync"
        OptionText="PresetToDisplayString" Style="min-width: 7em" />

        <FluentSpacer />

        @* Input tabs (file names) *@
        @if (CurrentInput != null && renamingTo != null)
        {
            @* Renaming confirmation *@
            <FluentTextField @bind-Value="renamingTo" TextFieldType="TextFieldType.Text" Title="File name" Placeholder="@CurrentInput.FileName"></FluentTextField>
            <FluentButton Title="Confirm rename" OnClick="RenameInputAsync">
                <FluentIcon Value="@(new Icons.Regular.Size20.Checkmark())" Color="Color.Success" />
            </FluentButton>
            <FluentButton Title="Cancel rename" OnClick="() => renamingTo = null">
                <FluentIcon Value="@(new Icons.Regular.Size20.ArrowUndo())" Color="Color.Error" />
            </FluentButton>
        }
        else
        {
            @* Input tabs *@
            <FluentSelect TOption="string" AriaLabel="File manager"
            @bind-Value="SelectedInputIndex" @bind-Value:after="OnInputSelectedAsync"
            Style="min-width: 12em">
                @foreach (var (index, input) in inputs.Index())
                {
                    <FluentOption Value="@index.ToString()">@input.FileName</FluentOption>
                }
                <FluentDivider />
                <FluentOption Value="@(((int)SpecialInput.AddCSharp).ToString())">Add .cs</FluentOption>
                <FluentOption Value="@(((int)SpecialInput.AddRazor).ToString())">Add .razor</FluentOption>
                <FluentOption Value="@(((int)SpecialInput.AddCshtml).ToString())">Add .cshtml</FluentOption>

                @if (inputs.Count > 1)
                {
                    <FluentDivider />
                    <FluentOption Value="@(((int)SpecialInput.RemoveOtherFiles).ToString())">Remove other files</FluentOption>
                }
                <FluentDivider />
                <FluentOption Value="@(((int)SpecialInput.Configuration).ToString())">
                    @if (configuration is null)
                    {
                        @:Add configuration
                    }
                    else
                    {
                        @:Configuration
                    }
                </FluentOption>
            </FluentSelect>

            @* Rename button *@
            @if (CurrentInput != null)
            {
                <FluentButton Title="Rename current file" OnClick="() => renamingTo = CurrentInput.FileName">
                    <FluentIcon Value="@(new Icons.Regular.Size20.Rename())" Color="Color.Neutral" />
                </FluentButton>
            }

            @* Delete button *@
            if (inputs.Count > 1 || CurrentSpecialInput != null)
            {
                <FluentButton Title="Delete current file" OnClick="DeleteInputAsync">
                    <FluentIcon Value="@(new Icons.Regular.Size20.Delete())" Color="Color.Error" />
                </FluentButton>
            }
        }

        @* Compile button *@
        <FluentButton BackgroundColor="var(--custom-dark)" Color="white" OnClick="CompileAsync" Loading="compilationInProgress"
        Title="Compile (Ctrl+S)">
            Compile
        </FluentButton>

        @if (compiled is (_, var compiledOutput))
        {
            @* Output tabs *@
            @* NOTE: @key is needed - otherwise, when Items change,
            the FluentSelect might render incorrect selected option 
            even though SelectedOption is set correctly (probably a bug). *@
            <FluentSelect AriaLabel="Output type" Items="AllOutputs.Select(o => o.Type)" @key="AllOutputs"
            @bind-SelectedOption="selectedOutputType" @bind-SelectedOption:after="UpdateOutputDisplayAsync"
            Style="min-width: 7em" />

            @* Error List button *@
            @if (compiledOutput is { NumErrors: > 0 } or { NumWarnings: > 0 })
            {
                var color = compiledOutput.NumErrors > 0 ? "error" : "warning";
                <FluentButton BackgroundColor="@($"var(--{color})")"
                Title="Display Error List" OnClick="async () => {
                        selectedOutputType = CompiledAssembly.DiagnosticsOutputType;
                        await UpdateOutputDisplayAsync();
                    }">
                    @(compiledOutput.NumErrors > 0 ? compiledOutput.NumErrors : compiledOutput.NumWarnings)
                </FluentButton>
            }

            @* Design time / runtime toggle *@
            @if (CurrentCompiledFile?.GetOutput(selectedOutputType!)?.DesignTimeText is not null)
            {
                <FluentSelect TOption="string" AriaLabel="Generation Strategy"
                @bind-Value="generationStrategy" @bind-Value:after="UpdateOutputDisplayAsync"
                Style="min-width: 7em">
                    <FluentOption Value="runtime">Runtime</FluentOption>
                    <FluentOption Value="@designTime">Design</FluentOption>
                </FluentSelect>
            }

            @* Output loading indicator *@
            <FluentProgressRing title="Output is loading" Visible="outputLoading" Width="1em" />
        }

        <FluentSpacer />

        @* Settings button *@
        <FluentButton OnClick="settings.OpenModalAsync">
            Settings

            @if (settings.ShowUpdateAvailableBadge)
            {
                <FluentSpacer Width="4" />
                <FluentBadge Appearance="Appearance.Accent" title="Update is available">1</FluentBadge>
            }
        </FluentButton>

        @* Layout buttons *@
        @if (layout != Layout.InputOnly)
        {
            <FluentButton OnClick="() => layout = Layout.InputOnly"
            Title="Display input (left side) only">
                <FluentIcon Value="@(new Icons.Regular.Size20.LayoutColumnOneThirdRight())" Color="Color.Neutral" />
            </FluentButton>
        }
        @if (layout != Layout.Split)
        {
            <FluentButton OnClick="() => layout = Layout.Split"
            Title="Display both input and output side-by-side">
                <FluentIcon Value="@(new Icons.Regular.Size20.LayoutColumnTwo())" Color="Color.Neutral" />
            </FluentButton>
        }
        @if (layout != Layout.OutputOnly)
        {
            <FluentButton OnClick="() => layout = Layout.OutputOnly"
            Title="Display output (right side) only">
                <FluentIcon Value="@(new Icons.Regular.Size20.LayoutColumnOneThirdLeft())" Color="Color.Neutral" />
            </FluentButton>
        }
    </FluentStack>
</FluentHeader>

<CascadingValue IsFixed="true" Value="this">
    <Settings @ref="settings" Editor="inputEditor" @bind-WordWrap="wordWrap" @bind-UseVim="useVim" />
</CascadingValue>

@* Input / output text areas *@
@{
    RenderFragment inputPanel =@<div style="height: 100%">
        <div id="vim-status" class="vim-status-bar" hidden="@(!useVim)" />
        <BlazorMonaco.Editor.StandaloneCodeEditor @ref="inputEditor" Id="input-editor"
        ConstructionOptions="EditorConstructionOptions" OnDidInit="EditorInitAsync"
        OnDidChangeModel="LanguageServices.OnDidChangeModel"
        OnDidChangeModelContent="LanguageServices.OnDidChangeModelContent" />
    </div>
    ;

    RenderFragment outputPanel =@<BlazorMonaco.Editor.StandaloneCodeEditor @ref="outputEditor" Id="output-editor"
        ConstructionOptions="OutputConstructionOptions" />
    ;

    var panel1 = layout == Layout.OutputOnly ? outputPanel : inputPanel;
    var panel2 = layout == Layout.OutputOnly ? inputPanel : outputPanel;
}
<FluentSplitter Orientation="Orientation.Horizontal" Panel1Size="50%" Panel2Size="50%"
Style="flex-grow: 1; overflow: hidden"
Panel1="panel1" Panel2="panel2" Collapsed="layout != Layout.Split" />

@code {
    private readonly TaskCompletionSource editorInitialized = new();
    private readonly List<Input> inputs = new();
    private DotNetObjectReference<Page>? dotNetObjectReference;
    private IJSObjectReference? module;
    private Input? configuration;
    private InputPreset? selectedPresetRaw;
    private string? previousSelectedInputIndexRaw;
    private string? selectedInputIndexRaw;
    private int currentInputIndex;
    private string? renamingTo;
    private StandaloneCodeEditor inputEditor = null!;
    private StandaloneCodeEditor outputEditor = null!;
    private string? selectedOutputType;
    private string? generationStrategy;
    private bool compilationInProgress;
    private bool outputLoading;
    private (CompilationInput Input, CompiledAssembly Output)? compiled;
    private Settings settings = null!;
    private bool wordWrap;
    private bool useVim;
    private Layout layout;
    private const string designTime = "designTime";

    private sealed record Input(string FileName, TextModel Model)
    {
        public string FileName { get; set; } = FileName;
        public string? NewContent { get; set; }
    }

    private enum InputPreset
    {
        Custom,
        CSharp,
        Razor,
        Cshtml,
    }

    private enum SpecialInput
    {
        AddRazor = -1,
        AddCSharp = -2,
        AddCshtml = -3,
        RemoveOtherFiles = -4,
        Configuration = -5,
    }

    private enum Layout
    {
        Split,
        InputOnly,
        OutputOnly,
    }

    private Input? CurrentInput
    {
        get
        {
            if (currentInputIndex < 0 || currentInputIndex >= inputs.Count)
            {
                return null;
            }

            return inputs[currentInputIndex];
        }
    }

    private string SelectedInputIndex
    {
        get => selectedInputIndexRaw ?? currentInputIndex.ToString();
        set => selectedInputIndexRaw = value;
    }

    private IEnumerable<CompiledFileOutput> AllOutputs
    {
        get => (CurrentCompiledFile?.Outputs)
            .TryConcat(compiled?.Output.GlobalOutputs);
    }

    private SpecialInput? CurrentSpecialInput
    {
        get
        {
            var result = (SpecialInput)currentInputIndex;
            return result is SpecialInput.Configuration ? result : null;
        }
    }

    protected override void OnInitialized()
    {
        NavigationManager.LocationChanged += OnLocationChanged;
    }

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;

        if (module is not null)
        {
            try
            {
                await module.DisposeAsync();
            }
            catch (JSDisconnectedException) { }
        }

        dotNetObjectReference?.Dispose();
    }

    private async void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        await LoadStateFromUrlAsync();
        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./Lab/Page.razor.js");
            dotNetObjectReference = DotNetObjectReference.Create(this);
            await module.InvokeVoidAsync("registerEventListeners", dotNetObjectReference);
        }

        // Select an output type if none is selected.
        if (noOutputTypeSelected())
        {
            selectedOutputType = AllOutputs.MaxBy(static o => o.Priority)!.Type;
            if (noOutputTypeSelected())
            {
                // Do not call `StateHasChanged` - that would lead to stack overflow.
                Debug.Assert(false, "Unexpected cycle in selecting default output type.");
            }
            else
            {
                StateHasChanged();
                await UpdateOutputDisplayAsync();
            }
        }

        bool noOutputTypeSelected()
        {
            return AllOutputs.Any() &&
                (selectedOutputType == null || GetOutput(selectedOutputType) == null);
        }
    }

    private StandaloneEditorConstructionOptions EditorConstructionOptions(StandaloneCodeEditor editor)
    {
        return new()
        {
            AutomaticLayout = true,
            WordWrap = wordWrap ? "on" : "off",
            Padding = new() { Top = 10 },
        };
    }

    private StandaloneEditorConstructionOptions OutputConstructionOptions(StandaloneCodeEditor editor)
    {
        return new()
        {
            AutomaticLayout = true,
            ReadOnly = true,
            WordWrap = wordWrap ? "on" : "off",
            Value = "Empty output (click Compile or press Ctrl+S to refresh)",
            BracketPairColorization = new() { Enabled = false },
            Padding = new() { Top = 10 },
        };
    }

    private InputPreset SelectedPreset
    {
        get
        {
            return selectedPresetRaw ?? inputs switch
            {
                [{ } input] => input.FileName switch
                {
                    var s when matches(s, InitialCode.CSharp) => InputPreset.CSharp,
                    var s when matches(s, InitialCode.Cshtml) => InputPreset.Cshtml,
                    _ => InputPreset.Custom,
                },
                [{ } input1, { } input2]
                    when matches(input1.FileName, InitialCode.Razor) &&
                        matches(input2.FileName, InitialCode.RazorImports) => InputPreset.Razor,
                _ => InputPreset.Custom,
            };

            static bool matches(string fileName, InitialCode initialCode)
            {
                return fileName.EndsWith(initialCode.SuggestedFileExtension, StringComparison.OrdinalIgnoreCase);
            }
        }
        set
        {
            selectedPresetRaw = value;
        }
    }

    private IEnumerable<InputPreset> AvailablePresets
    {
        get
        {
            yield return InputPreset.CSharp;
            yield return InputPreset.Razor;
            yield return InputPreset.Cshtml;
            if (SelectedPreset == InputPreset.Custom)
            {
                yield return InputPreset.Custom;
            }
        }
    }

    private static string PresetToDisplayString(InputPreset preset)
    {
        return preset switch
        {
            InputPreset.CSharp => "C#",
            InputPreset.Razor => "Razor",
            InputPreset.Cshtml => "CSHTML",
            _ => "Custom",
        };
    }

    private async Task OnInputPresetChangedAsync()
    {
        var preset = selectedPresetRaw;

        var initialCode = preset switch
        {
            InputPreset.CSharp => InitialCode.CSharp,
            InputPreset.Razor => InitialCode.Razor,
            InputPreset.Cshtml => InitialCode.Cshtml,
            _ => null,
        };
        if (initialCode != null)
        {
            await SaveStateToUrlAsync();

            inputs.Clear();
            currentInputIndex = 0;
            await AddInputAsync(initialCode);

            if (preset == InputPreset.Razor)
            {
                await AddInputAsync(InitialCode.RazorImports, selectAsCurrent: false);
            }

            await SaveStateToUrlAsync();
        }

        selectedPresetRaw = null;
    }

    private async Task OnInputSelectedAsync()
    {
        if (selectedInputIndexRaw == previousSelectedInputIndexRaw)
        {
            return;
        }

        previousSelectedInputIndexRaw = selectedInputIndexRaw;

        int selectedInputIndex = int.Parse(selectedInputIndexRaw!);

        await SaveStateToUrlAsync();

        switch (selectedInputIndex)
        {
            case (int)SpecialInput.AddCSharp:
                await AddInputAsync(InitialCode.CSharp);
                break;

            case (int)SpecialInput.AddRazor:
                await AddInputAsync(InitialCode.Razor);
                break;

            case (int)SpecialInput.AddCshtml:
                await AddInputAsync(InitialCode.Cshtml);
                break;

            case (int)SpecialInput.RemoveOtherFiles:
                inputs.RemoveAll(i => i != CurrentInput);
                currentInputIndex = 0;
                OnWorkspaceChanged();
                break;

            case (int)SpecialInput.Configuration:
                currentInputIndex = (int)SpecialInput.Configuration;
                configuration ??= new(
                    InitialCode.Configuration.SuggestedFileName,
                    await CreateModelAsync(InitialCode.Configuration.ToInputCode()));
                OnWorkspaceChanged();
                await inputEditor.SetModel(configuration.Model);
                break;

            case var _ when selectedInputIndex >= 0 && selectedInputIndex < inputs.Count:
                await SelectInputAsync(selectedInputIndex);
                break;
        }

        await SaveStateToUrlAsync();

        // Without this, the event handler might be called twice.
        _ = Task.Delay(0).ContinueWith(_ =>
        {
            selectedInputIndexRaw = null;
            previousSelectedInputIndexRaw = null;
            StateHasChanged();
        });
    }

    private async Task SelectInputAsync(int index)
    {
        currentInputIndex = index;
        await inputEditor.SetModel(inputs[index].Model);

        // Display output corresponding to the selected input.
        await UpdateOutputDisplayAsync();
    }

    private async Task RenameInputAsync()
    {
        Debug.Assert(CurrentInput != null && renamingTo != null);

        await SaveStateToUrlAsync();

        if (CurrentInput.FileName != renamingTo)
        {
            var oldLanguage = GetLanguageForFileExtension(Path.GetExtension(CurrentInput.FileName));
            var newLanguage = GetLanguageForFileExtension(Path.GetExtension(renamingTo));

            CurrentInput.FileName = renamingTo;

            if (oldLanguage != newLanguage)
            {
                await BlazorMonaco.Editor.Global.SetModelLanguage(JSRuntime, CurrentInput.Model, newLanguage);
            }

            OnWorkspaceChanged();
        }
        renamingTo = null;

        await SaveStateToUrlAsync();
    }

    private async Task DeleteInputAsync()
    {
        await SaveStateToUrlAsync();

        switch (currentInputIndex)
        {
            case (int)SpecialInput.Configuration:
                configuration = null;
                break;
            default:
                Debug.Assert(CurrentInput != null && inputs.Count > 1);
                inputs.RemoveAt(currentInputIndex);
                break;
        }

        currentInputIndex = 0;
        OnWorkspaceChanged();
        await inputEditor.SetModel(CurrentInput!.Model);

        await SaveStateToUrlAsync();
    }

    private async Task AddInputAsync(InitialCode initialCode, bool selectAsCurrent = true)
    {
        var fileName = FindUniqueName(initialCode);
        var inputCode = initialCode.ToInputCode(fileName);
        var model = await CreateModelAsync(inputCode);
        inputs.Add(new(fileName, model) { NewContent = inputCode.Text });
        if (selectAsCurrent)
        {
            currentInputIndex = inputs.Count - 1;
        }
        OnWorkspaceChanged();
        if (selectAsCurrent)
        {
            await inputEditor.SetModel(model);
        }
    }

    private string FindUniqueName(InitialCode initialCode)
    {
        for (var i = 0; ; i++)
        {
            var suffix = i == 0 ? "" : $"{i}";
            var fileName = initialCode.GetFinalFileName(suffix);
            if (!inputs.Any(i => i.FileName == fileName))
            {
                return fileName;
            }
        }
    }

    [JSInvokable]
    public async Task CompileAndRenderAsync()
    {
        await CompileAsync();
        StateHasChanged();
    }

    private async Task CompileAsync()
    {
        // Complete renaming if in progress.
        if (renamingTo != null)
        {
            await RenameInputAsync();
        }

        compilationInProgress = true;

        await RefreshAsync();

        await editorInitialized.Task;

        var savedState = await SaveStateToUrlAsync();

        // Compile.
        var input = savedState.ToCompilationInput();
        var result = await Worker.CompileAsync(input);
        compiled = (input, result);

        await DisplaySquiggles();

        compilationInProgress = false;

        await UpdateOutputDisplayAsync();
    }

    private async Task DisplaySquiggles()
    {
        foreach (var input in inputs)
        {
            List<MarkerData> markers = compiled?.Output.Diagnostics
                .Where(d => d.FilePath == compiled.Value.Output.BaseDirectory + input.FileName)
                .Select(d => d.ToMarkerData())
                .ToList() ?? [];
            await BlazorMonaco.Editor.Global.SetModelMarkers(JSRuntime, input.Model, "Lab", markers);
        }
    }

    private async Task UpdateOutputDisplayAsync()
    {
        if (compiled is null || selectedOutputType is null)
        {
            await outputEditor.SetModel(await BlazorMonaco.Editor.Global.CreateModel(JSRuntime, value: ""));
            return;
        }

        var output = await LoadOutput(selectedOutputType);
        await outputEditor.SetModel(await BlazorMonaco.Editor.Global.CreateModel(JSRuntime, value: output, language: selectedOutputType == "C#" ? "csharp" : null));
    }

    private (CompiledFileOutput Output, string? File)? GetOutput(string type)
    {
        if (CurrentCompiledFile is { } currentCompiledFile)
        {
            if (currentCompiledFile.GetOutput(type) is { } output)
            {
                return (output, CurrentFileName);
            }
        }

        if (compiled?.Output.GetGlobalOutput(type) is { } globalOutput)
        {
            return (globalOutput, null);
        }

        return null;
    }

    private async Task<string> LoadOutput(string type)
    {
        if (GetOutput(type) is not (var output, var file))
        {
            return "";
        }

        if (output.DesignTimeText is not null && generationStrategy == designTime)
        {
            return output.DesignTimeText;
        }

        if (output.EagerText is { } text)
        {
            return text;
        }

        if (!outputLoading)
        {
            return await loadAsync(compiled!.Value.Input, file: file, outputType: type);
        }

        return "";

        async Task<string> loadAsync(CompilationInput input, string? file, string outputType)
        {
            outputLoading = true;
            await RefreshAsync();

            string? result;
            try
            {
                // The text will be cached and loaded synchronously next time.
                result = await output.GetTextAsync(outputFactory: async () =>
                {
                    return await Worker.GetOutputAsync(input, file: file, outputType: outputType);
                });
            }
            catch (Exception ex)
            {
                result = ex.ToString();
            }

            outputLoading = false;
            StateHasChanged();
            return result;
        }
    }

    private string CurrentFileName => CurrentInput?.FileName ?? "";

    private CompiledFile? CurrentCompiledFile
    {
        get
        {
            return compiled?.Output.Files.TryGetValue(CurrentFileName, out var file) == true
                ? file
                : null;
        }
    }

    private async Task EditorInitAsync()
    {
        await settings.InitializeAsync();

        await LoadStateFromUrlAsync();

        if (!editorInitialized.TrySetResult())
        {
            // This can happen during hot reload, hence we don't assert.
            Logger.LogError("Failed to set editor initialized result.");
        }
    }

    private async Task<TextModel> CreateModelAsync(InputCode inputCode)
    {
        return await BlazorMonaco.Editor.Global.CreateModel(
            JSRuntime,
            value: inputCode.Text,
            language: GetLanguageForFileExtension(inputCode.FileExtension));
    }

    private static string? GetLanguageForFileExtension(string extension) => extension switch
    {
        ".razor" or ".cshtml" => "razor",
        ".cs" => "csharp",
        _ => null,
    };

    /// <summary>
    /// Should be called before SetModel of Monaco editor whenever (after) <see cref="inputs"/> change.
    /// </summary>
    private void OnWorkspaceChanged()
    {
        var models = inputs
            .Select(i => new ModelInfo(Uri: i.Model.Uri, FileName: i.FileName) { NewContent = i.NewContent })
            .ToImmutableArray();
        inputs.ForEach(i => { i.NewContent = null; });
        Worker.OnDidChangeWorkspace(models);
    }
}
