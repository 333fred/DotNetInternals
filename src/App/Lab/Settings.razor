@inject DependencyRegistry DependencyRegistry
@inject IJSRuntime JSRuntime
@inject ILocalStorageService LocalStorage
@inject Lazy<NuGetDownloader> NuGetDownloader

<button type="button" class="btn btn-outline-secondary" @onclick="OpenModalAsync">
    Settings
</button>

@if (modalOpen)
{
    <div class="modal d-block bg-opacity-75 bg-secondary" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Settings</h5>
                    <button type="button" class="btn-close" aria-label="Close" @onclick="() => modalOpen = false"></button>
                </div>
                <div class="modal-body">
                    @* Word wrap check box *@
                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" id="wordWrap" @bind="WordWrap"
                            @bind:after="OnWordWrapChanged" />
                        <label class="form-check-label" for="wordWrap">
                            Word wrap
                        </label>
                    </div>

                    @* Use VIM check box *@
                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" id="vim" @bind="UseVim"
                            @bind:after="OnVimChanged" />
                        <label class="form-check-label" for="vim">
                            Use VIM
                        </label>
                    </div>

                    <h6 class="mt-3 h5">Compilers</h6>

                    @* Roslyn version select *@
                    <div class="mb-3">
                        <div class="input-group">
                            <label for="roslynVersion" class="input-group-text">
                                Roslyn
                            </label>
                            <input type="text" class="form-control" id="roslynVersion"
                                   @bind="roslynVersion" @bind:after="LoadRoslynInfoAsync"
                                   placeholder="version" />
                            @if (loadingRoslynInfo)
                            {
                                <span class="input-group-text">
                                    <div class="spinner-border spinner-border-sm" role="status" title="Loading info..."></div>
                                </span>
                            }
                        </div>
                        <div class="form-text">
                            See
                            <a href="@NuGetUtil.GetPackageVersionListUrl(CompilerProxy.RoslynPackageId)"
                               target="_blank">available Roslyn versions</a>.
                            Use
                            @if (roslynVersion != "latest")
                            {
                                <a href="javascript:void" @onclick:preventDefault
                                    @onclick="@(() => UseRoslynVersionAsync("latest"))">latest</a>
                            }
                            @if (!string.IsNullOrWhiteSpace(roslynVersion))
                            {
                                if (roslynVersion != "latest")
                                {
                                    @(" or ")
                                }
                                <a href="javascript:void" @onclick:preventDefault
                                    @onclick="@(() => UseRoslynVersionAsync(null))">built-in</a>
                            }
                            @(".")
                        </div>
                        @if (roslynInfo != null)
                        {
                            <div class="form-text">
                                Using @(roslynInfo.Version)
                                (<a href="@roslynInfo.Commit.Url"
                                    target="_blank">@roslynInfo.Commit.ShortHash</a>).
                            </div>
                        }
                        @if (roslynError != null)
                        {
                            <div class="form-text text-danger">
                                @roslynError
                            </div>
                        }
                    </div>

                    @* Razor version select *@
                    <div class="mb-3">
                        <div class="input-group">
                            <label for="razorVersion" class="input-group-text">
                                Razor
                            </label>
                            <input type="text" class="form-control" id="razorVersion"
                                   @bind="razorVersion" @bind:after="LoadRazorInfoAsync"
                                   placeholder="version" />
                            @if (loadingRazorInfo)
                            {
                                <span class="input-group-text">
                                    <div class="spinner-border spinner-border-sm" role="status" title="Loading info..."></div>
                                </span>
                            }
                        </div>
                        <div class="form-text">
                            See
                            <a href="@NuGetUtil.GetPackageVersionListUrl(CompilerProxy.RazorPackageId)"
                               target="_blank">available Razor versions</a>.
                            Use
                            @if (razorVersion != "latest")
                            {
                                <a href="javascript:void" @onclick:preventDefault
                                    @onclick="@(() => UseRazorVersionAsync("latest"))">latest</a>
                            }
                            @if (!string.IsNullOrWhiteSpace(razorVersion))
                            {
                                if (razorVersion != "latest")
                                {
                                    @(" or ")
                                }
                                <a href="javascript:void" @onclick:preventDefault
                                    @onclick="@(() => UseRazorVersionAsync(null))">built-in</a>
                            }
                            @(".")
                        </div>
                        @if (razorInfo != null)
                        {
                            <div class="form-text">
                                Using @(razorInfo.Version)
                                (<a href="@razorInfo.Commit.Url"
                                    target="_blank">@razorInfo.Commit.ShortHash</a>).
                            </div>
                        }
                        @if (razorError != null)
                        {
                            <div class="form-text text-danger">
                                @razorError
                            </div>
                        }
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" @onclick="() => modalOpen = false">Close</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private bool modalOpen;
    private IJSObjectReference? vimDisposable;
    private string? roslynVersion, razorVersion;
    private bool loadingRoslynInfo, loadingRazorInfo;
    private NuGetPackageInfo? roslynInfo, razorInfo;
    private string? roslynError, razorError;

    [Parameter] public bool WordWrap { get; set; }
    [Parameter] public EventCallback<bool> WordWrapChanged { get; set; }
    [Parameter] public bool UseVim { get; set; }
    [Parameter] public EventCallback<bool> UseVimChanged { get; set; }
    [Parameter, EditorRequired] public required StandaloneCodeEditor Editor { get; set; }

    public async Task InitializeAsync()
    {
        // Load settings from local storage.
        if (await LocalStorage.ContainKeyAsync(nameof(WordWrap)))
        {
            WordWrap = await LocalStorage.GetItemAsync<bool>(nameof(WordWrap));
            await OnWordWrapChanged();
        }
        if (await LocalStorage.ContainKeyAsync(nameof(UseVim)))
        {
            UseVim = await LocalStorage.GetItemAsync<bool>(nameof(UseVim));
            await OnVimChanged();
        }
    }

    private Task OpenModalAsync()
    {
        if (modalOpen)
        {
            return Task.CompletedTask;
        }

        modalOpen = true;

        Task roslynTask = Task.CompletedTask;
        Task razorTask = Task.CompletedTask;

        if (roslynInfo is null)
        {
            roslynTask = LoadRoslynInfoAsync();
        }

        if (razorInfo is null)
        {
            razorTask = LoadRazorInfoAsync();
        }

        return Task.WhenAll(roslynTask, razorTask);
    }

    private async Task LoadRoslynInfoAsync()
    {
        const string key = "roslyn";

        if (string.IsNullOrWhiteSpace(roslynVersion))
        {
            roslynInfo = CompilerProxy.GetBuiltInInfo(CompilerProxy.RoslynAssemblyName);
            roslynError = null;
            DependencyRegistry.RemoveAssemblies(key);
            return;
        }

        loadingRoslynInfo = true;
        await RefreshAsync();

        var package = NuGetDownloader.Value.GetPackage(
            CompilerProxy.RoslynPackageId,
            roslynVersion,
            CompilerProxy.RoslynPackageFolder);

        DependencyRegistry.SetAssemblies(key, package.GetAssembliesAsync);

        try
        {
            roslynInfo = await package.GetInfoAsync();
            roslynError = null;
        }
        catch (Exception ex)
        {
            roslynError = ex.Message;
            roslynInfo = null;
        }

        loadingRoslynInfo = false;
    }

    private async Task UseRoslynVersionAsync(string? version)
    {
        roslynVersion = version;
        await LoadRoslynInfoAsync();
    }

    private async Task LoadRazorInfoAsync()
    {
        const string key = "razor";

        if (string.IsNullOrWhiteSpace(razorVersion))
        {
            razorInfo = CompilerProxy.GetBuiltInInfo(CompilerProxy.RazorAssemblyName);
            razorError = null;
            DependencyRegistry.RemoveAssemblies(key);
            return;
        }

        loadingRazorInfo = true;
        await RefreshAsync();

        var package = NuGetDownloader.Value.GetPackage(
            CompilerProxy.RazorPackageId,
            razorVersion,
            CompilerProxy.RazorPackageFolder);

        DependencyRegistry.SetAssemblies(key, package.GetAssembliesAsync);

        try
        {
            razorInfo = await package.GetInfoAsync();
            razorError = null;
        }
        catch (Exception ex)
        {
            razorError = ex.Message;
            razorInfo = null;
        }

        loadingRazorInfo = false;
    }

    private async Task UseRazorVersionAsync(string? version)
    {
        razorVersion = version;
        await LoadRazorInfoAsync();
    }

    private async Task OnWordWrapChanged()
    {
        await RefreshAsync();
        await WordWrapChanged.InvokeAsync(WordWrap);
        await LocalStorage.SetItemAsync(nameof(WordWrap), WordWrap);
        await Editor.UpdateOptions(new EditorUpdateOptions { WordWrap = WordWrap ? "on" : "off" });
    }

    private async Task OnVimChanged()
    {
        await RefreshAsync();
        await UseVimChanged.InvokeAsync(UseVim);
        await LocalStorage.SetItemAsync(nameof(UseVim), UseVim);
        if (UseVim)
        {
            if (vimDisposable is null)
            {
                vimDisposable = await JSRuntime.InvokeAsync<IJSObjectReference>("jslib.EnableVimMode", "input-editor", "vim-status");
            }
        }
        else
        {
            if (vimDisposable is not null)
            {
                await vimDisposable.InvokeVoidAsync("dispose");
                vimDisposable = null;
            }
        }

        await Editor.Layout();
    }
}
