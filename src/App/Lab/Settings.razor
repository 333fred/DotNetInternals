@implements IDisposable
@inject ILogger<Settings> Logger
@inject IJSRuntime JSRuntime
@inject ILocalStorageService LocalStorage
@inject WorkerController Worker
@inject LanguageServices LanguageServices
@inject HttpClient Client

<FluentDesignTheme StorageName="theme" @bind-Mode="theme" CustomColor="@AppColors.CustomDark"
OnLoaded="(e) => SetEditorThemeAsync(e.IsDark)" OnLuminanceChanged="(e) => SetEditorThemeAsync(e.IsDark)" />

<FluentDialog @bind-Hidden="modalHidden" Modal="true" TrapFocus="true" PreventScroll="true"
@ondialogdismiss="CloseModal">
    <FluentDialogHeader ShowDismiss="true">
        <FluentLabel Typo="Typography.PaneHeader">
            Settings
        </FluentLabel>
    </FluentDialogHeader>

    <FluentDialogBody>
        <FluentStack Orientation="Orientation.Vertical">
            @* Open config file *@
            <FluentStack VerticalAlignment="VerticalAlignment.Center">
                C# version, feature flags, and more:
                <FluentButton OnClick="GoToConfigurationAsync" Appearance="Appearance.Lightweight"
                IconStart="@(new Icons.Regular.Size16.DocumentSettings())">Open Configuration</FluentButton>
            </FluentStack>

            @* Word wrap check box *@
            <FluentCheckbox @bind-Value="WordWrap" @bind-Value:after="OnWordWrapChanged" Label="Word wrap" />

            @* Use VIM check box *@
            <FluentCheckbox @bind-Value="UseVim" @bind-Value:after="OnVimChanged" Label="Use VIM" />

            <FluentAccordion Style="width: 100%">
                <FluentAccordionItem Heading="Advanced" HeadingLevel="5">
                    <FluentStack Orientation="Orientation.Vertical">
                        @* Language services check box *@
                        <FluentCheckbox @bind-Value="EnableLanguageServices" @bind-Value:after="OnSetEnableLanguageServicesAsync"
                        title="Completions, live diagnostics">
                            Language services (requires restart)
                            <FluentBadge>experimental</FluentBadge>
                        </FluentCheckbox>

                        @* Debug logs check box *@
                        <FluentCheckbox @bind-Value="DebugLogs" @bind-Value:after="OnSetDebugLogsAsync"
                        Label="Debug logs" title="Whether to display debug-level logs in the browser development console" />

                        @* Use a worker check box *@
                        <FluentCheckbox @bind-Value="EnableWorker" @bind-Value:after="OnSetEnableWorkerAsync"
                        Label="Compile in a background worker thread (requires restart)"
                        title="Moves compilation (and language services if enabled) to a separate worker thread (it is recommended to keep this enabled)" />
                    </FluentStack>
                </FluentAccordionItem>
            </FluentAccordion>

            <h5 style="margin: 0.75rem 0 0 0">Compilers</h5>

            @* SDK version select *@
            <FluentTextField @bind-Value="sdkVersion" @bind-Value:after="() => LoadSdkInfoAsync()"
            Placeholder="version" Style="width: 100%">
                <FluentLabel slot="start">SDK</FluentLabel>
                <FluentProgressRing slot="end" title="Loading info..." Visible="loadingSdkInfo" Width="1em" />
            </FluentTextField>
            <FluentLabel Style="opacity: 80%">
                Enter a .NET SDK version above to automatically get
                the corresponding Roslyn and Razor version numbers below.
            </FluentLabel>
            @if (sdkInfo != null)
            {
                <FluentLabel>
                    SDK @(sdkInfo.SdkVersion)
                    (<a href="@sdkInfo.Commit.Url"
                    target="_blank">@sdkInfo.Commit.ShortHash</a>)
                    has roslyn @(sdkInfo.RoslynVersion)
                    and razor @(sdkInfo.RazorVersion).
                </FluentLabel>
            }
            @if (sdkError != null)
            {
                <FluentLabel Color="Color.Error">
                    @sdkError
                </FluentLabel>
            }

            @* Roslyn version select *@
            <FluentStack>
                <FluentTextField @bind-Value="roslynVersion" @bind-Value:after="() => LoadRoslynInfoAsync()"
                Placeholder="@VersionPlaceholder" Style="width: 100%">
                    <FluentLabel slot="start">Roslyn</FluentLabel>
                    <FluentProgressRing slot="end" title="Loading info..." Visible="loadingRoslynInfo" Width="1em" />
                </FluentTextField>
                <FluentSelect AriaLabel="@ConfigurationTip" Items="Enum.GetValues<BuildConfiguration>()"
                @bind-SelectedOption="roslynConfiguration" @bind-SelectedOption:after="() => LoadRoslynInfoAsync()"
                Style="min-width: 7em" />
            </FluentStack>
            <FluentLabel>
                @SeeLinks(CompilerInfo.Roslyn)
                Use
                @if (roslynVersion != "latest")
                {
                    <a href="javascript:void" @onclick:preventDefault
                    @onclick="@(() => UseRoslynVersionAsync("latest"))">latest</a>
                }
                @if (!string.IsNullOrWhiteSpace(roslynVersion))
                {
                    if (roslynVersion != "latest")
                    {
                        @(" or ")
                    }
                    <a href="javascript:void" @onclick:preventDefault
                    @onclick="@(() => UseRoslynVersionAsync(null))">built-in</a>
                }
                @(".")
            </FluentLabel>
            @Info((roslynInfo, roslynError))

            @* Razor version select *@
            <FluentStack>
                <FluentTextField @bind-Value="razorVersion" @bind-Value:after="() => LoadRazorInfoAsync()"
                Placeholder="@VersionPlaceholder" Style="width: 100%">
                    <FluentLabel slot="start">Razor</FluentLabel>
                    <FluentProgressRing slot="end" title="Loading info..." Visible="loadingRazorInfo" Width="1em" />
                </FluentTextField>
                <FluentSelect AriaLabel="@ConfigurationTip" Items="Enum.GetValues<BuildConfiguration>()"
                @bind-SelectedOption="razorConfiguration" @bind-SelectedOption:after="() => LoadRazorInfoAsync()"
                Style="min-width: 7em" />
            </FluentStack>
            <FluentLabel>
                @SeeLinks(CompilerInfo.Razor)
                Use
                @if (razorVersion != "latest")
                {
                    <a href="javascript:void" @onclick:preventDefault
                    @onclick="@(() => UseRazorVersionAsync("latest"))">latest</a>
                }
                @if (!string.IsNullOrWhiteSpace(razorVersion))
                {
                    if (razorVersion != "latest")
                    {
                        @(" or ")
                    }
                    <a href="javascript:void" @onclick:preventDefault
                    @onclick="@(() => UseRazorVersionAsync(null))">built-in</a>
                }
                @(".")
            </FluentLabel>
            @Info((razorInfo, razorError))

            @* About section *@
            <h5 style="margin: 0.75rem 0 0 0">About</h5>
            <p style="margin: 0">
                <a href="@VersionUtil.CurrentRepositoryUrl" target="_blank">GitHub</a>,
                commit
                <a href="@VersionUtil.CurrentCommitUrl" target="_blank"
                title="@commitInfo?.Message">@VersionUtil.CurrentShortCommitHash</a>
                @if (commitInfo != null)
                {
                    @(" ")<span title="@commitInfo.Message">(@commitInfo.Date.ToString("MMM d, yyyy, HH:mm"))</span>
                    @if (commitInfo.Version != null)
                    {
                        @(", ")<a title="Click to see release notes"
                        href="@VersionUtil.CurrentRepositoryReleasesUrl"
                        target="_blank">@commitInfo.Version</a>
                    }
                }
            </p>

            @if (UpdateInfo.LoadUpdate is { } loadUpdate)
            {
                <FluentMessageBar Title="An update is available" Intent="MessageIntent.Info">
                    <FluentStack Style="margin-top: 0.5em" HorizontalAlignment="HorizontalAlignment.Stretch">
                        <FluentButton Appearance="Appearance.Accent" Style="width: 100%" OnClick="loadUpdate"
                        IconStart="@(new Icons.Regular.Size16.ArrowClockwise())">Reload</FluentButton>
                        <FluentAnchor Href="@VersionUtil.CurrentRepositoryReleasesUrl" Target="_blank" Style="width: 100%"
                        IconStart="@(new Icons.Regular.Size16.DocumentBulletList())">Release notes</FluentAnchor>
                    </FluentStack>
                </FluentMessageBar>
            }

            @* Theme select *@
            <FluentSelect Items="Enum.GetValues<DesignThemeModes>()" @bind-SelectedOption="theme"
            OptionText="@(x => $"{x} theme")" />
        </FluentStack>
    </FluentDialogBody>

    <FluentDialogFooter>
        <FluentSpacer />
        <FluentButton Appearance="Appearance.Neutral" OnClick="CloseModal">Close</FluentButton>
    </FluentDialogFooter>
</FluentDialog>

@code {
    private static readonly string VersionPlaceholder = "version / PR / branch / build";

    private static readonly string ConfigurationTip = "Release configuration is always used for the built-in compilers and versions from NuGet.";

    private static readonly RenderFragment<CompilerInfo> SeeLinks = (info) =>@<span>
        Lists:
        <a href="@info.NuGetVersionListUrl" target="_blank">version</a>,
        <a href="@info.PrListUrl" target="_blank">PR</a>,
        <a href="@info.BranchListUrl" target="_blank">branch</a>,
        <a href="@info.BuildListUrl" target="_blank" title="Enter build ID (from the URL) not the build number">build</a>.
    </span>
    ;

    private static readonly RenderFragment<(CompilerDependencyInfo? Info, string? Error)> Info = (arg) =>@<div>
        @if (arg.Info != null)
        {
            <FluentLabel>
                Using @(arg.Info.Version)
                (<a href="@arg.Info.Commit.Url"
                target="_blank">@arg.Info.Commit.ShortHash</a>),
                <span title="@(arg.Info.CanChangeBuildConfiguration ? "" : ConfigurationTip)">@arg.Info.Configuration</span>.
            </FluentLabel>
        }
        @if (arg.Error != null)
        {
            <FluentLabel Color="Color.Error">
                @arg.Error
            </FluentLabel>
        }
    </div>
    ;

    private sealed class GitHubCommitResponse
    {
        public required CommitData Commit { get; init; }

        public sealed class CommitData
        {
            public required AuthorData Author { get; init; }
            public required string Message { get; init; }
        }

        public sealed class AuthorData
        {
            public required DateTimeOffset Date { get; init; }
        }
    }

    private sealed class GitHubBranchCommitsResponse
    {
        public ImmutableArray<string> Tags { get; init; }
    }

    private sealed class CommitInfo
    {
        public required string Hash { get; init; }
        public required DateTimeOffset Date { get; init; }
        public required string Message { get; init; }
        public required string? Version { get; init; }
    }

    private bool modalHidden = true;
    private bool hideUpdateAvailableBadge;
    private DesignThemeModes theme;
    private IJSObjectReference? vimDisposable;
    private string? sdkVersion, roslynVersion, razorVersion;
    private BuildConfiguration roslynConfiguration, razorConfiguration;
    private bool loadingSdkInfo, loadingRoslynInfo, loadingRazorInfo;
    private SdkInfo? sdkInfo;
    private CompilerDependencyInfo? roslynInfo, razorInfo;
    private CommitInfo? commitInfo;
    private string? sdkError, roslynError, razorError;

    [Parameter] public bool WordWrap { get; set; }
    [Parameter] public EventCallback<bool> WordWrapChanged { get; set; }
    [Parameter] public bool UseVim { get; set; }
    [Parameter] public EventCallback<bool> UseVimChanged { get; set; }
    [Parameter, EditorRequired] public required StandaloneCodeEditor Editor { get; set; }
    [CascadingParameter] public required Page Page { get; set; }

    public bool ShowUpdateAvailableBadge
    {
        get => !hideUpdateAvailableBadge && UpdateInfo.UpdateIsAvailable;
    }

    private bool DebugLogs
    {
        get => Logging.LogLevel == LogLevel.Debug;
        set => Logging.LogLevel = value ? LogLevel.Debug : LogLevel.Information;
    }

    private bool EnableLanguageServices { get; set; }
    private bool EnableWorker { get; set; }

    private async Task OnSetDebugLogsAsync()
    {
        await LocalStorage.SetItemAsync(nameof(DebugLogs), DebugLogs);
    }

    private async Task OnSetEnableLanguageServicesAsync()
    {
        await LocalStorage.SetItemAsync(nameof(EnableLanguageServices), EnableLanguageServices);
    }

    private async Task OnSetEnableWorkerAsync()
    {
        await LocalStorage.SetItemAsync(nameof(EnableWorker), EnableWorker);
    }

    public async Task InitializeAsync()
    {
        UpdateInfo.UpdateBecameAvailable += StateHasChanged;

        // Load settings from local storage.
        if (await LocalStorage.ContainKeyAsync(nameof(WordWrap)))
        {
            WordWrap = await LocalStorage.GetItemAsync<bool>(nameof(WordWrap));
            await OnWordWrapChanged();
        }
        if (await LocalStorage.ContainKeyAsync(nameof(UseVim)))
        {
            UseVim = await LocalStorage.GetItemAsync<bool>(nameof(UseVim));
            await OnVimChanged();
        }
        if (await LocalStorage.ContainKeyAsync(nameof(DebugLogs)))
        {
            DebugLogs = await LocalStorage.GetItemAsync<bool>(nameof(DebugLogs));
        }
        if (await LocalStorage.ContainKeyAsync(nameof(EnableLanguageServices)))
        {
            EnableLanguageServices = await LocalStorage.GetItemAsync<bool>(nameof(EnableLanguageServices));
        }
        EnableWorker = await LocalStorage.ContainKeyAsync(nameof(EnableWorker))
            ? await LocalStorage.GetItemAsync<bool>(nameof(EnableWorker))
            : true;

        var savedCommitInfo = await LocalStorage.ContainKeyAsync(nameof(commitInfo))
            ? await LocalStorage.GetItemAsync<CommitInfo>(nameof(commitInfo))
            : null;
        if (savedCommitInfo?.Hash == VersionUtil.CurrentCommitHash)
        {
            commitInfo = savedCommitInfo;
        }

        if (EnableLanguageServices)
        {
            await LanguageServices.RegisterAsync();
        }
        else
        {
            LanguageServices.Disabled = true;
        }

        Worker.DebugLogs = DebugLogs;
        Worker.Disabled = !EnableWorker;
    }

    void IDisposable.Dispose()
    {
        UpdateInfo.UpdateBecameAvailable -= StateHasChanged;
    }

    public Task OpenModalAsync()
    {
        hideUpdateAvailableBadge = true;

        if (!modalHidden)
        {
            return Task.CompletedTask;
        }

        modalHidden = false;

        Task sdkTask = Task.CompletedTask;
        Task roslynTask = Task.CompletedTask;
        Task razorTask = Task.CompletedTask;
        Task commitTask = Task.CompletedTask;

        if (sdkInfo is null)
        {
            sdkTask = LoadSdkInfoAsync(saveState: false);
        }

        if (roslynInfo is null)
        {
            roslynTask = LoadRoslynInfoAsync(saveState: false);
        }

        if (razorInfo is null)
        {
            razorTask = LoadRazorInfoAsync(saveState: false);
        }

        if (commitInfo is null)
        {
            commitTask = LoadCommitInfoAsync();
        }

        return Task.WhenAll(sdkTask, roslynTask, razorTask, commitTask);
    }

    public void CloseModal()
    {
        modalHidden = true;
    }

    internal Task LoadFromStateAsync(SavedState state)
    {
        Task sdkTask = Task.CompletedTask;
        Task roslynTask = Task.CompletedTask;
        Task razorTask = Task.CompletedTask;

        if (sdkVersion != state.SdkVersion)
        {
            sdkVersion = state.SdkVersion;
            sdkTask = LoadSdkInfoAsync(saveState: false);
        }

        if (roslynVersion != state.RoslynVersion ||
            roslynConfiguration != state.RoslynConfiguration)
        {
            roslynVersion = state.RoslynVersion;
            roslynConfiguration = state.RoslynConfiguration;
            roslynTask = LoadRoslynInfoAsync(saveState: false);
        }

        if (razorVersion != state.RazorVersion ||
            razorConfiguration != state.RazorConfiguration)
        {
            razorVersion = state.RazorVersion;
            razorConfiguration = state.RazorConfiguration;
            razorTask = LoadRazorInfoAsync(saveState: false);
        }

        return Task.WhenAll(sdkTask, roslynTask, razorTask);
    }

    private async Task LoadSdkInfoAsync(bool saveState = true)
    {
        var versionToLoad = sdkVersion;

        if (saveState)
        {
            await Page.SaveStateToUrlAsync(state => state with { SdkVersion = versionToLoad });
        }

        loadingSdkInfo = true;
        await RefreshAsync();

        SdkInfo? info;
        string? error;
        try
        {
            if (string.IsNullOrEmpty(versionToLoad))
            {
                info = null;
                error = null;
            }
            else
            {
                info = modalHidden ? null : await Worker.GetSdkInfoAsync(versionToLoad);
                error = null;

                if (saveState)
                {
                    await Task.WhenAll(
                        UseRoslynVersionAsync(info?.RoslynVersion),
                        UseRazorVersionAsync(info?.RazorVersion));
                }
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to load SDK info.");
            error = ex.Message;
            info = null;
        }

        if (sdkVersion == versionToLoad)
        {
            sdkInfo = info;
            sdkError = error;
        }

        loadingSdkInfo = false;
        await RefreshAsync();
    }

    private async Task UseSdkVersionAsync(string? version)
    {
        sdkVersion = version;
        await LoadSdkInfoAsync();
    }

    private async Task<(CompilerDependencyInfo? Info, string? Error)> LoadCompilerInfoAsync(
        CompilerKind compilerKind,
        string? versionToLoad,
        BuildConfiguration configuration)
    {
        try
        {
            await Worker.UseCompilerVersionAsync(
                compilerKind,
                version: versionToLoad,
                configuration: configuration);

            var info = modalHidden
                ? null
                : await Worker.GetCompilerDependencyInfoAsync(compilerKind);

            return (info, null);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Failed to load {compilerKind} info.");

            return (null, ex.Message);
        }
    }

    private async Task LoadRoslynInfoAsync(bool saveState = true)
    {
        var versionToLoad = roslynVersion;

        if (saveState)
        {
            await Page.SaveStateToUrlAsync(state => state with
            {
                RoslynVersion = versionToLoad,
                RoslynConfiguration = roslynConfiguration,
            });
        }

        loadingRoslynInfo = true;
        await RefreshAsync();

        var (info, error) = await LoadCompilerInfoAsync(CompilerKind.Roslyn, versionToLoad, roslynConfiguration);

        if (roslynVersion == versionToLoad)
        {
            roslynInfo = info;
            roslynError = error;
        }

        loadingRoslynInfo = false;
        await RefreshAsync();
    }

    private async Task UseRoslynVersionAsync(string? version)
    {
        roslynVersion = version;
        roslynConfiguration = BuildConfiguration.Release;
        await LoadRoslynInfoAsync();
    }

    private async Task LoadRazorInfoAsync(bool saveState = true)
    {
        var versionToLoad = razorVersion;

        if (saveState)
        {
            await Page.SaveStateToUrlAsync(state => state with
            {
                RazorVersion = versionToLoad,
                RazorConfiguration = razorConfiguration,
            });
        }

        loadingRazorInfo = true;
        await RefreshAsync();

        var (info, error) = await LoadCompilerInfoAsync(CompilerKind.Razor, versionToLoad, razorConfiguration);

        if (razorVersion == versionToLoad)
        {
            razorInfo = info;
            razorError = error;
        }

        loadingRazorInfo = false;
        await RefreshAsync();
    }

    private async Task UseRazorVersionAsync(string? version)
    {
        razorVersion = version;
        razorConfiguration = BuildConfiguration.Release;
        await LoadRazorInfoAsync();
    }

    private async Task LoadCommitInfoAsync()
    {
        var commitHash = VersionUtil.CurrentCommitHash;
        if (commitHash is null || commitInfo?.Hash == commitHash)
        {
            return;
        }

        GitHubCommitResponse? response;
        try
        {
            response = await Client.GetFromJsonAsync<GitHubCommitResponse>(
                $"https://api.github.com/repos/{VersionUtil.CurrentRepositoryOwnerAndName}/commits/{commitHash}");
            if (response is null)
            {
                return;
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to load commit info.");
            return;
        }

        // Find version tag corresponding to the commit.
        // Inspired by https://stackoverflow.com/a/69590375.
        string? version = null;
        try
        {
            var request = new HttpRequestMessage(
                HttpMethod.Get,
                $"https://github.com/{VersionUtil.CurrentRepositoryOwnerAndName}/branch_commits/{commitHash}".WithCorsProxy());
            request.Headers.Accept.Add(new("application/json"));
            var tagsResponse = await Client.SendAsync(request);
            var tagsObj = await tagsResponse.Content.ReadFromJsonAsync<GitHubBranchCommitsResponse>();
            version = tagsObj?.Tags is [{ Length: > 0 } tag] ? tag : null;
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to load version info.");
        }

        commitInfo = new CommitInfo
            {
                Hash = commitHash,
                Date = response.Commit.Author.Date,
                Message = response.Commit.Message,
                Version = version,
            };
        StateHasChanged();
        await LocalStorage.SetItemAsync(nameof(commitInfo), commitInfo);
    }

    private async Task OnWordWrapChanged()
    {
        await RefreshAsync();
        await WordWrapChanged.InvokeAsync(WordWrap);
        await LocalStorage.SetItemAsync(nameof(WordWrap), WordWrap);
        await Editor.UpdateOptions(new EditorUpdateOptions { WordWrap = WordWrap ? "on" : "off" });
    }

    private async Task OnVimChanged()
    {
        await RefreshAsync();
        await UseVimChanged.InvokeAsync(UseVim);
        await LocalStorage.SetItemAsync(nameof(UseVim), UseVim);
        if (UseVim)
        {
            if (vimDisposable is null)
            {
                vimDisposable = await JSRuntime.InvokeAsync<IJSObjectReference>("jslib.EnableVimMode", "input-editor", "vim-status");
            }
        }
        else
        {
            if (vimDisposable is not null)
            {
                await vimDisposable.InvokeVoidAsync("dispose");
                vimDisposable = null;
            }
        }

        await Editor.Layout();
    }

    private async Task SetEditorThemeAsync(bool dark)
    {
        await BlazorMonaco.Editor.Global.SetTheme(JSRuntime, dark ? "vs-dark" : "vs");
    }

    private async Task GoToConfigurationAsync()
    {
        await Page.SelectConfigurationAsync();
        CloseModal();
    }
}
